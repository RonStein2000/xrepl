module org.xrepl.xscript.Xscript

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*
import org.eclipse.xtext.generator.parser.antlr.*

var grammarURI = "classpath:/org/xrepl/xscript/Xscript.xtext"
var file.extensions = "xscript"
var projectName = "org.xrepl.xscript"
var runtimeProject = "../${projectName}"

var uiProject = "${runtimeProject}.ui"
var backtrack = false
var memoize = false

Workflow {
	bean = StandaloneSetup {
		platformUri = "${runtimeProject}/.."
	}
	
	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-emf"
	}

	component = org.eclipse.emf.mwe2.ecore.EcoreGenerator {
		genModel = "platform:/resource/${projectName}/model/Xscript.genmodel"
		srcPath ="platform:/resource/${projectName}/src"
		srcPath ="platform:/resource/org.eclipse.xtext.common.types/src"
		srcPath ="platform:/resource/org.eclipse.xtext.xbase/src"
	}
	
	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = uiProject
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		language = {
			uri = grammarURI
			fileExtensions = file.extensions
			fragment = grammarAccess.GrammarAccessFragment {}
			fragment = parseTreeConstructor.ParseTreeConstructorFragment {}
			fragment = resourceFactory.ResourceFactoryFragment {
				fileExtensions = file.extensions
			}
			fragment = XtextAntlrGeneratorFragment {
				options = auto-inject {}
			}
			fragment = DebugAntlrGeneratorFragment {
				options = auto-inject {}
			}
			fragment = validation.JavaValidatorFragment {}
			fragment = scoping.ImportNamespacesScopingFragment {}
			fragment = types.TypesGeneratorFragment {}
			fragment = xbase.XbaseGeneratorFragment {}
			fragment = builder.BuilderIntegrationFragment {}
			fragment = formatting.FormatterFragment {}
			fragment = quickfix.QuickfixProviderFragment {}
			fragment = labeling.LabelProviderFragment {}
			fragment = outline.OutlineTreeProviderFragment {}
			fragment = contentAssist.JavaBasedContentAssistFragment {}
			fragment = XtextAntlrUiGeneratorFragment {
				options = auto-inject {}
			}
			fragment = refactoring.RefactorElementNameFragment {}
		}
	}
}
