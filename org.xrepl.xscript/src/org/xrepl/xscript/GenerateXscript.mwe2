module org.xrepl.xscript.Xscript

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*
import org.eclipse.xtext.generator.parser.antlr.*

var grammarURI = "classpath:/org/xrepl/xscript/Xscript.xtext"
var file.extensions = "xscript"
var projectName = "org.xrepl.xscript"
var runtimeProject = "../${projectName}"

Workflow {
	bean = StandaloneSetup {
		platformUri = "${runtimeProject}/.."
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		language = {
			uri = grammarURI
			fileExtensions = file.extensions

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment {}

			// generates Java API for the generated EPackages 
			fragment = ecore.EcoreGeneratorFragment {
				referencedGenModels = "platform:/resource/org.xrepl.xscript/model/Xscript.genmodel"
			}

			// the serialization component
			fragment = parseTreeConstructor.ParseTreeConstructorFragment {}

			// a custom ResourceFactory for use with EMF 
			fragment = resourceFactory.ResourceFactoryFragment {
				fileExtensions = file.extensions
			}

			fragment = XtextAntlrGeneratorFragment {
				options = auto-inject {}
				antlrParam = "-Xconversiontimeout"
				antlrParam = "10000"
			}
			fragment = DebugAntlrGeneratorFragment {
				options = auto-inject {}
			}
			fragment = validation.JavaValidatorFragment {}
			fragment = scoping.ImportNamespacesScopingFragment {}
			fragment = types.TypesGeneratorFragment {}
			fragment = formatting.FormatterFragment {}
			fragment = quickfix.QuickfixProviderFragment {}
			fragment = labeling.LabelProviderFragment {}
			fragment = outline.OutlineTreeProviderFragment {}
			fragment = contentAssist.JavaBasedContentAssistFragment {}
			fragment = XtextAntlrUiGeneratorFragment {
				options = auto-inject {}
				antlrParam = "-Xconversiontimeout"
				antlrParam = "10000"
			}
		}
	}
}